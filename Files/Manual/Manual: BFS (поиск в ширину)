Упрощенная версия:
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> g;
vector<int> used;
int n;

void bfs(int s)
{
	queue<int> q;
	q.push(s);
	used[s] = 1;
	while (!q.empty())
	{
		int v = q.front;
		q.pop;
		for (int i = 0; i < g[v].size(); i++)
			if (used[g[v][i]])
			{
				used[g[v][i]] = 1;
				q.push(g[v][i]);
			}
	}
}

int main()
{
	int m, a, b;
	cin >> n >> m;
	g.resize(n);
	used.resize(n, 0);

	for (int i = 0; i < m; i++)
	{
		cin >> a >> b;
		g[a - 1].push_back(b - 1);
		g[b - 1].push_back(a - 1);
	}

	int start, finish;
	cin >> start >> finish;
	bfs(start - 1);
	return 0;
}

Полная версия:
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> g;
vector<int> d, p, used;
int n;

void bfs(int s)
{
	queue<int> q;
	q.push(s);
	d[s] = 0;
	while (!q.empty())
	{
		int v = q.front();
		q.pop();
		for (int i = 0; i < g[v].size(); i++)
		{
			int to = g[v][i];
			if (d[to] == INT_MAX)
			{
				p[to] = v;
				d[to] = d[v] + 1;
				q.push(to);
			}
		}
	}
}

vector<int> path(int to)
{
	vector<int> pat;
	for (int v = to; v != -1; v = p[v])
		pat.push_back(v + 1);
	return pat;
}

int main()
{
	int m, a, b;
	cin >> n >> m;
	g.resize(n);
	used.resize(n, 0);
	d.resize(n, INT_MAX);
	p.resize(n, -1);
	for (int i = 0; i < m; i++)
	{
		cin >> a >> b;
		g[a - 1].push_back(b - 1);
		g[b - 1].push_back(a - 1);
	}

	int start, finish;
	cin >> start >> finish;
	bfs(start - 1);
	vector<int> ans = path(finish - 1);
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << " ";
	return 0;
}
