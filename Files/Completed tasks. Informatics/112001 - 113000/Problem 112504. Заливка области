Через DFS:
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
using namespace std;

vector <vector<int>> matrix;
int sizeY, sizeX, tmpcolor, color, global_count = 0;

void fill(int x, int y)
{
	if (x >= 0 && x <= sizeY - 1 && y >= 0 && y <= sizeX - 1)
	{
		if (matrix[x][y] == tmpcolor)
		{
			matrix[x][y] = color;
			global_count++;
			fill(x - 1, y);
			fill(x + 1, y);
			fill(x, y + 1);
			fill(x, y - 1);
		}
	}
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int startX, startY;
	cin >> sizeY >> sizeX >> startX >> startY >> color;
	matrix.resize(sizeY, vector<int>(sizeX));
	for (int i = 0; i < sizeY; i++)
	for (int j = 0; j < sizeX; j++)
		cin >> matrix[i][j];
	cout << endl;
	tmpcolor = matrix[startY][startX];
	if (tmpcolor != color)
	{
		fill(startY, startX);
		cout << global_count << endl;
	}
	else
		cout << 0 << endl;
	for (int i = 0; i < sizeY; i++)
	{
		for (int j = 0; j < sizeX; j++)
			cout << matrix[i][j] << " ";
		cout << endl;
	}
	return 0;
}

Через BFS:
#include <iostream>
#include <queue>
#include <vector>
#include <fstream>
using namespace std;

vector<vector<int> > g ;
int n,m;

void bfs(int start_x,int start_y,int color,int *k)
{
	if(g[start_x][start_y] != color){
		queue <pair<int,int> > q;
		int c = g[start_x][start_y];
		g[start_x][start_y] = color;
		*k+=1;
		q.push({start_x,start_y});
		while(!q.empty())
		{
			int x = q.front().first, y = q.front().second;
			q.pop();
			if(x-1>=0 && g[x-1][y] == c){
				g[x-1][y] = color;
				q.push({x-1,y});
				*k+=1;
			}
			if(y-1>=0 && g[x][y-1] == c){
				g[x][y-1] = color;
				q.push({x,y-1});
				*k+=1;
			}
		 	if(x+1<n && g[x+1][y] == c){
				g[x+1][y] = color;
				q.push({x+1,y});
				*k+=1;
			}
			if(y+1<m && g[x][y+1] == c){
				g[x][y+1] = color;
				q.push({x,y+1});
				*k+=1;
			}
		}
	}
}
 
int main()
{
	ifstream in("input.txt");
 	ofstream out("output.txt");
	int a,x,y,color,k=0;
	in>>n>>m>>y>>x>>color;
	g.resize(n);
	for(int i=0; i<n; i++)
	{
		for(int j=0; j<m; j++)
		{
			in>>a;
			g[i].push_back(a);
		}		
	}
	bfs(x,y,color,&k);
	out<<k<<endl;
	for(int i=0; i<n; i++)
	{
		for(int j=0; j<m; j++)
		{
			out<<g[i][j]<<" ";
		}
		out<<endl;		
	}
	in.close(); 
	out.close(); 
}
Решение на паре:
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> graph;
int m, n;
void bfs(int x, int y, int color, int &k)
{
	queue<pair<int, int>> q;
	q.push({ x, y });
	int oldColor = graph[x][y];
	graph[x][y] = color;
	k++;
	while (!q.empty())
	{
		x = q.front().first;
		y = q.front().second;
		q.pop();
		if (x - 1 >= 0 && graph[x - 1][y] == oldColor)
		{
			graph[x - 1][y] = color;
			q.push({ x - 1, y });
			k++;
		}
		if (x + 1 < n && graph[x + 1][y] == oldColor)
		{
			graph[x + 1][y] = color;
			q.push({ x + 1, y });
			k++;
		}
		if (y - 1 >= 0 && graph[x][y - 1] == oldColor)
		{
			graph[x][y - 1] = color;
			q.push({ x, y - 1 });
			k++;
		}
		if (y + 1 < m && graph[x][y + 1] == oldColor)
		{
			graph[x][y + 1] = color;
			q.push({ x, y + 1});
			k++;
		}
	}
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int x, y, color;
	cin >> n >> m;
	cin >> y >> x;
	cin >> color;
	graph.resize(n, vector<int>(m));
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> graph[i][j];
	int k = 0;
	if (color != graph[x][y])
		bfs(x, y, color, k);
	cout << k << endl;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			cout << graph[i][j] << " ";
		cout << endl;
	}
	return 0;
}
