#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
//#include <set>
#include <vector>
using namespace std;

int n, to, min_price, output_price;
vector<int> price;
vector<bool> marks;
vector<vector<int>> paths;

int D(int s, int f)
{
	min_price = INT_MAX;
	int asf = paths[s].size();
	for (int i = 0; i < paths[s].size(); i++)
	{
		if (min_price > price[paths[s][i]] && !marks[paths[s][i]])
		{
			min_price = price[paths[s][i]];
			to = paths[s][i];
		}
	}
	if (min_price != INT_MAX)
	{
		output_price += price[to];
		marks[to] = true;
		D(to, f);
		return output_price;
	}
	else
	{
		return -1;
	}
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int m, fp, sp, start = 1, finish = 5;
	cin >> n;
	price.resize(n);
	marks.resize(n);
	paths.resize(n, vector<int>());
	for (int i = 0; i < n; i++)
		cin >> price[i];
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> fp >> sp;
		paths[fp - 1].push_back(sp - 1);
	}

	if (D(start - 1, finish - 1) != -1)
		cout << D(start - 1, finish - 1);
	else
		cout << -1;
	return 0;
}
