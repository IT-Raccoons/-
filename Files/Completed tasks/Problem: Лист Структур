#include <iostream>
using namespace std;

struct student{
	string Name;
	string LastName;
	int Count;
	int Class;
};

struct Node {
	student Value;
	Node* Left;
	Node* Right;
	Node() {
		Left = NULL;
		Right = NULL;
	}
};

struct List {
	Node* Head;
	Node* Tail;
	List() {
		Head = NULL;
		Tail = NULL;
	}
	void PushFront(student val) {
		if (Head == NULL) {
			Head = new Node();
			Head -> Value = val;
			Tail = Head;
		}
		else {
			Node* tmp = new Node();
			tmp -> Value = val;
			tmp -> Right = Head;
			Head -> Left = tmp;
			Head = tmp;
		}
	}
	void Insert(Node* Prev, student val) {
		if (Prev == NULL)
			PushFront(val);
		else {
			Node* tmp = new Node();
			tmp -> Value = val;
			tmp -> Left = Prev;
			tmp -> Right = Prev -> Right;
			Prev -> Right = tmp;
			if (tmp -> Right) {
				tmp -> Right -> Left = tmp;
			}
			else {
				Tail = tmp;
			}
		}
	}
	void Delete(Node* Elem) {
		if (Elem -> Left) {
			Elem -> Left -> Right = Elem -> Right;
		}
		else {
			Head = Elem -> Right;
		}
		if (Elem -> Right) {
			Elem -> Right -> Left = Elem -> Left;
		}
		else {
			Tail = Elem -> Left;
		}
		delete Elem;
	}
	void PrintList() {
		for (Node* it = Head; it != NULL; it = it -> Right) {
			cout << it -> Value.Name << " "<< it -> Value.LastName<<" "<< it -> Value.Class<<" "<< it -> Value.Count<<endl;
		}
		cout << endl;
	}
};

int main() {
	List a;
	student s;
	int n;
	cin>>n;
	for(int i=0; i<n; i++)
	{
		cin>>s.Name>>s.LastName>>s.Class>>s.Count;
		a.Insert(a.Tail, s);
	}
	for (Node* it = a.Head; it != NULL; it = ((it == NULL) ? a.Head : it -> Right))
	 {
			if(it->Value.Count>=5 ||(it->Value.Class==4 && it->Value.Count<2) )
			{
				if(it->Left)
				{
					it = it -> Left;
					a.Delete ( it -> Right);
				}
				else
				{
					a.Delete(it);
					it=NULL;
				}
			}
			else
			{
				if(it->Value.Count<2)
				it->Value.Class++;
			}
	}
	a.PrintList();
	return 0;
}
