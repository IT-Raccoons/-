Вариант от Андрея:
#include <iostream>
#include <string>
#include <stack>
using namespace std;

int main()
{	
	string char_prior = "()+-*/^";
	int int_prior[7] = {0, 0, 1, 1, 2, 2, 3};
	stack<char> chars;
	string input = "", output = "";
	getline(cin, input);
	
	for (int i = 0; i < input.size(); i++)
	{
		if (input[i] >= '0' && input[i] <= '9')
		{
			if (input[i + 1] >= '0' && input[i + 1] <= '9')
				output += input[i];
			else {
				output += input[i];
				output += " ";
			}
		}
		else if (input[i] == '+'
			|| input[i] == '-'
			|| input[i] == '*'
			|| input[i] == '/'
			|| input[i] == '^')
		{
			if (chars.size() == 0)
				chars.push(input[i]);
			else if (int_prior[char_prior.find(input[i])] <= int_prior[char_prior.find(chars.top())])
			{
				output += chars.top();
				output += " ";
				chars.pop();
				chars.push(input[i]);
			}
			else
				chars.push(input[i]);
		}
		else if (input[i] == '(')
			chars.push(input[i]);
		else if (input[i] == ')')
		{
			while (chars.top() != '(')
			{
				output += chars.top();
				output += " ";
				chars.pop();
			}
			chars.pop();
		}
	}
	while (chars.size() != 0)
	{
		output += chars.top();
		output += " ";
		chars.pop();
	}
	cout << output;
	return 0;
}

Вариант от Алексея (НЕ ПРАВЬТЕ ТАБУЛЯЦУЮ В ГИТЕ):
#include <iostream>
#include <string.h>
#include <stack>
#include <map>
using namespace std;

int main()
{	
	/*///C++ 11
	map <char, int> p_operation =  {{'(', 0},{')', 0},
                            		{'+', 1},{'-', 1},
									{'*', 2},{'/', 2},
									{'^', 3}};
	////C++ 11*/

	map <char, int> p_operation;
	p_operation['(']=0;
	p_operation[')']=0;
	p_operation['+']=1;
	p_operation['-']=1;
	p_operation['*']=2;
	p_operation['/']=2;
	p_operation['^']=3;
	
	stack<char> operation;
	string input="",output="";
	getline(cin, input);
	
	for (int i=0;i<input.size();i++)
	{
		//Запись чисел
		if(input[i]>='0' && input[i]<='9'){
			output+=input[i];	
		}
		//Занесение знаков в стек
		else if (input[i]=='+' || input[i]=='-' || input[i]=='*' || input[i]=='/' || input[i]=='^')	{
				output+=" ";
				if (operation.size()==0){
					operation.push(input[i]);
				}
				else if (p_operation[operation.top()]>=p_operation[input[i]]) {
					output=output+operation.top()+" ";
					operation.pop();
					operation.push(input[i]);
				}
			else{
				operation.push(input[i]);
			}
		}
		//Обработка скобок
		else if (input[i]=='('){
			operation.push(input[i]);
		}
		else if (input[i]==')'){
			output+=" ";
			while (operation.top()!='('){
				output=output+operation.top()+" ";
				operation.pop();
			}
			operation.pop();
		}
	}
	while (operation.size()!=0){ 
		output=output+operation.top()+" ";
		operation.pop();
	}
	cout << output;
	return 0;
}

Вариант с преобработкой:
#include<vector>
#include<iostream>
#include<stack>
#include<string>

using namespace std;

vector<string> SplitString(string s)
{
	vector<string> v;
	string s1="";
	for (int i = 0; i < s.size(); i++)
	{
		if (s[i] != ' ')
			s1 += s[i];
		else if (s1.size() > 0)
		{
			v.push_back(s1);
			s1 = "";
		}
	}
	if (s1.size() > 0)
	{
		v.push_back(s1);
		s1 = "";
	}
}

int StrToInt(string s)
{
	int a = 0;
	for (int i = 0; i < s.size(); i++)
		a = a * 10 + (s[i] - '0');
	return a;
}

int main()
{
	string s;
	stack<int> st;
	getline(cin, s);
	vector<string> v = SplitString(s);
	for (int i = 0; i < v.size(); i++)
	{
		if (v[i][0] >= '0' && v[i][0] <= '9')
			st.push(StrToInt(v[i]));
		else if (v[i][0] == '+')
		{

		}
	}
}
Вариант на векторах с постобработкой:
#include<vector>
#include<iostream>
#include<stack>
#include<string>

using namespace std;

vector<string> SplitString(string s)
{
	vector<string> v;
	string s1 = "";
	for (int i = 0; i < s.size(); i++)
	{
		if (s[i] != ' ')
			s1 += s[i];
		else if (s1.size() > 0)
		{
			v.push_back(s1);
			s1 = "";
		}
	}
	if (s1.size() > 0)
	{
		v.push_back(s1);
		s1 = "";
	}
	return v;
}

int StrToInt(string s)
{
	int a = 0;
	for (int i = 0; i < s.size(); i++)
		a = a * 10 + (s[i] - '0');
	return a;
}

string InfToPostf(string s)
{
	auto elems = SplitString(s);
	string output = "";
	stack<string> st;
	for (auto e : elems)
	{
		if (e[0] >= '0' and e[0] <= '9')
		{
			if (output.size() != 0)
				output += " ";
			output += e;
		}
		else if (e == "+" || e == "-")
		{
			while (!st.empty() && st.top() != "(")
			{
				output += " " + st.top();
				st.pop();
			}
			st.push(e);
		}
		else if (e == "*" || e == "/")
		{
			while (!st.empty() &&
				(st.top() == "*" || st.top() == "/"))
			{
				output += " " + st.top();
				st.pop();
			}
			st.push(e);
		}
		else if (e == "(")
			st.push(e);
		else if (e == ")")
		{
			while (st.top() != "(")
			{
				output += " " + st.top();
				st.pop();
			}
			st.pop();
		}
	}
	while (!st.empty())
	{
		output += " " + st.top();
		st.pop();
	}
	return output;
}

int main()
{
	string s;
	getline(cin, s);
	cout << InfToPostf(s);
	system("pause");
}
